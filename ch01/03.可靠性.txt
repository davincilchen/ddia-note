可靠性Reliablity :
  #Tolerating hardware & software faults Human error 
  #描述
    *即使出現問題，也能繼續正確工作    
  #期望
    *應用程式表現出使用者所期望的功能。
    *允許使用者犯錯，允許使用者以出乎意料的方式使用軟體。
    *在預期的負載和資料量下，效能滿足要求。
    *系統能防止未經授權的訪問和濫用。
  #方式
    *預防勝於治療的情況（比如不存在治療方法時）
      -資安
    *傾向容忍錯誤 > 阻止錯誤（prevent error）
      -設計容錯機制以防因故障而導致失效
      -故意觸發來提高故障率    
        **引發故障來確保容錯機制不斷執行並接受考驗
          --Netflix:Chaos Monkey
  #狀況
    *容錯（fault-tolerant）或 韌性/彈性（resilient）: 能預料並排除故障
      -並非要做到可以容忍所有錯誤 
    *失效（failure） : 系統作為一個整體停止向用戶提供服務
    *故障（fault）: 系統的一部分狀態偏離其標準
      -硬體故障
        **處理
          --單節點故障修復
            ---磁碟:冗餘度          
            ---伺服器:雙路電源和熱插拔 CPU
            ---資料中心:後備電源
          --容忍單節點故障
            ---靈活性（flexibility）和彈性（elasticity） > 單機可靠性
            ---軟體容錯機制 (允許一次修復一個節點，無需整個系統停機)
            ---虛擬機器instance不可用卻沒有任何警告很常見的
      -軟體錯誤
        **一般錯誤??系統錯誤以外的??
        **系統性錯誤（systematic error）
          --軟體對其環境做出了某種假設: 假設通常來說是正確的，但由於某種原因最後不再成立
          --例子
            ---接受特定的錯誤輸入，導致所有instance潰的 BUG
              ----2012年6月30日的閏秒，Linux 中的一個錯誤，許多app同時掛掉。
            ---用盡一些共享資源，包括 CPU 時間、記憶體、磁碟空間或網路頻寬。
            ---系統依賴的服務變慢，沒有響應，或者開始返回錯誤的響應。
            ---級聯故障，一個元件中的小故障觸發另一個元件中的故障，進而觸發更多的故障
          --一些解決方式
            ---仔細考慮系統中的假設和互動
            ---徹底的測試
            ---程序隔離
            ---允許程序崩潰並重啟
            ---測量、監控並分析生產環境中的系統行為              
              ----如果系統能夠提供一些保證（例如在一個訊息佇列中，進入與發出的訊息數量相等）
              ----系統就可以在執行時不斷自檢，並在出現 差異（discrepancy）時報警




